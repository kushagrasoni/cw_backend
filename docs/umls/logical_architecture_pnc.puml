@startuml

'https://plantuml.com/deployment-diagram
title CodeWeaver - PySpark Code Generation Logical Architecture

'!includeurl plantuml.sketchtl.art/code/UML/Simple_Standard_Colors.puml


'card card [
'<i><color:blue>Technology Stack</color></i>
'====
'User Interface
'----
'ReactJS: React 18, NodeJS 16
'....
'HTML
'....
'CSS
'====
'Backend
'----
'Python: Version 11
'....
'FastAPI
'====
'AI Modeling
'----
'Azure OpenAI
'....
'Kore.ai
']

actor User as "Data Analyst"

file STM_File

rectangle UI as "Frontend - ReactJS UI"  {
    component Uploader as "STM Upload"
    component Code_Display
}

rectangle Preprocessor as "Backend - FastAPI" {
    component Extractor as "STM Data Extractor"
    component Formatter as "Data Formatter"

    database Formatted_STM_Data

    component Prompt_Gen as "Prompt Generator"

'    folder Prompt_Engineering as "Prompt Engineering" {
'
'    '    artifact Context as "Contextual Information"
'    '    artifact Code_Templates as "Code Templates"
'    '    component Evaluation as "Code Quality Evaluation"
'    }

    queue REST_Client as "REST Client"

    artifact Final_Code
}


cloud Cloud_Platform as "Private Cloud Platform" {
    component Azure_Cloud as "Azure/AWS"
    component OpenAI as "GPT 3.5 Model"
}




frame Local_AI_Model as "On-Prem Platform" {
    component Kore_AI as "KoreAI /\nAny Moderator"
}
'frame Local_AI_Model as "Local Generative AI Pipeline" {
'
''    rectangle GenAI_Module as "Generative Model" {
''        folder Data_Preparation {
''          package STM_To_Code_Dataset as "PySpark Code Dataset"
''          collections Training_Dataset
''          collections Validation_Dataset
''          collections Test_Dataset
''        }
''        component AI_Model as "Llama2 or \nSimilar Model"
''
''    }
''
''    STM_To_Code_Dataset -do-> Training_Dataset
''    STM_To_Code_Dataset -do-> Validation_Dataset
''    STM_To_Code_Dataset -do-> Test_Dataset
'
''    Training_Dataset --> AI_Model
''    Generated_Code <-up- AI_Model
''    Generated_Code -up-> AI_Model
'
'    component GenAI_Module as "Generative Model"
'    artifact Generated_Code as "Generated Code"
'
'    GenAI_Module -> Generated_Code
'
'    rectangle Post_Processor {
'        component Analyzer
'    }
'
'    Generated_Code -> Post_Processor : Code Analysis
'    Test_Dataset --> Analyzer
'}


User -> STM_File : (1). Creates STM
STM_File -> Uploader : (2). Uploads mapping file
Uploader --> Extractor : (3). Sends to backend
Extractor -do-> Formatter : (4). Extract Useful Data
Formatter -do-> Formatted_STM_Data : (5). Formatted Data
Formatted_STM_Data -le-> Prompt_Gen : (6). Generate Prompt
Prompt_Gen -up-> REST_Client : (7). Prompt Generated
REST_Client <-> Local_AI_Model : (8). Communicate with Moderator
Kore_AI -up-> Azure_Cloud : (9). Moderator to Cloud Platform
Azure_Cloud <-> OpenAI
REST_Client -up-> Final_Code : (10). Code Generated
Final_Code -> Code_Display : (11). Sent to UI


<style>
actor {
  BackGroundColor #ea9999
  LineThickness 1
  LineColor black
}
agent {
  BackGroundColor #f80c12
  LineThickness 1
  LineColor black
}
artifact {
  BackGroundColor #00e673
  LineThickness 1
  LineColor black
}
boundary {
  BackGroundColor #ee1100
  LineThickness 1
  LineColor black
}
card {
  BackGroundColor #ffbf00
  LineThickness 1
  LineColor black
}
circle {
  BackGroundColor #ff3311
  LineThickness 1
  LineColor black
}
cloud {
  BackGroundColor #e6ffff
  LineThickness 1
  LineColor black
}
collections {
  BackGroundColor #00ffbf
  LineThickness 1
  LineColor black
}
component {
  BackGroundColor #9fc5e8
  LineThickness 1
  LineColor black
}
control {
  BackGroundColor #ff6644
  LineThickness 1
  LineColor black
}
database {
  BackGroundColor #feae2d
  LineThickness 1
  LineColor black
}
entity {
  BackGroundColor #feae2d
  LineThickness 1
  LineColor black
}
file {
  BackGroundColor #feae2d
  LineThickness 1
  LineColor black
}
folder {
  BackGroundColor #ccbb33
  LineThickness 1
  LineColor black
}
frame {
  BackGroundColor #ccf2ff
  LineThickness 1
  LineColor black
}
hexagon {
  BackGroundColor #e1d584
  LineThickness 1
  LineColor black
}
interface {
  BackGroundColor #69d025
  LineThickness 1
  LineColor black
}
label {
  BackGroundColor black
  LineThickness 1
  LineColor black
}
node {
  BackGroundColor #22ccaa
  LineThickness 1
  LineColor black
}
package {
  BackGroundColor #16e9e6
  LineThickness 1
  LineColor black
}
person {
  BackGroundColor #11aabb
  LineThickness 1
  LineColor black
}
queue {
  BackGroundColor #9fc5e8
  LineThickness 1
  LineColor black
}
rectangle {
  BackGroundColor #d9ead3
  LineThickness 1
  LineColor black
}
stack {
  BackGroundColor #3311bb
  LineThickness 1
  LineColor black
}
storage {
  BackGroundColor #3b0cbd
  LineThickness 1
  LineColor black
}
usecase {
  BackGroundColor #442299
  LineThickness 1
  LineColor black
}
</style>


@enduml
